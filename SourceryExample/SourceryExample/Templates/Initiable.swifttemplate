<%
func variableNameAndType(_ variable: Variable, _ isFirstTime: Bool) -> String {
    let first = isFirstTime ? "\t_ " : ",\n\t\t"
    let nameAndType = "\(variable.name): \(variable.unwrappedTypeName)"
    return first + nameAndType
}

func variableOptionalAndValue(_ variable: Variable) -> String {
    if variable.isOptional {
        return "? = nil"
    } else if variable.unwrappedTypeName == "ParentComponent" {
        return " = ParentComponent()"
    } else {
        return ""
    }
}
-%>
<% for type in types.all
    where (type.implements["AutoInitiable"] != nil) { -%>
extension <%= type.name %> {
    <%_ var firstTime: Bool = true -%>
<%= "\t" + type.accessLevel -%> init(
    <% for variable in type.instanceVariables { -%>
        <%_= variableNameAndType(variable, firstTime) %><%= variableOptionalAndValue(variable) -%>
    <%_ firstTime = false -%>
    <%_ } %>
    ) {
        <%_ for variable in type.instanceVariables { -%>
        self.<%= variable.name %> = <%= variable.name %>
        <%_ } -%>
    }
}

<%_ } %>
